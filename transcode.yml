##
# NOTE: This file is a sample configuration starting point. Copy it to customize.
##

#####################################################################################
# global configuration
#####################################################################################
config:
  default_queue_file: '/volume1/config/sonarr/transcode_queue.txt'
  ffmpeg:             '/usr/bin/ffmpeg'
  ssh:                '/usr/bin/ssh'    # used only in cluster mode
  queues:                       # define your queues here (non-clustered use only)
    qsv: 1                      # max 1 job at a time for QSV transcode
    cuda: 2                     # max 2 jobs at a time for nVidia CUDA transcodes
                                # everything else defaults to 1 (sequential transcode)
  #####################################################
  # Define your home cluster here,
  # or remove this section if not
  # applicable
  #####################################################
  clusters:
    household:                  # name for this cluster

      workstation:
        type: local             # special case - use the pytranscoder host also in the cluster
        ffmpeg: '/usr/bin/ffmpeg'
        status: enabled
        queues:
          qsv: 1
          cuda: 2

      macpro:
        os: linux               # Choices are win10, linux, macos
        type: mounted           # machine with source media and host share a filesystem (nfs, samba, etc)
        ip: 192.168.2.65
        user: sshuser
        ffmpeg: '/usr/bin/ffmpeg'
        path-substitutions:     # optional, map source pathnames to equivalent on host
          - /volume2/ /media/
          - /volume3/ /media3/
        profiles:               # profiles allowed on this host
          - hevc
        status: enabled         # set to disabled to temporarily stop using

      win10:
        os: win10               # Choices are win10, linux, macos
        type: streaming         # host not using shared filesystem
        ip: 192.168.2.64        # address of host
        user: matt              # ssh login user
        working_dir: 'c:\temp'  # working folder on remote host, required for streaming type
        ffmpeg: '/usr/bin/ffmpeg'
        profiles:
          - hevc_cuda           # profiles allowed on this host
          - hevc_25fps
          - hevc_30fps
        queues:
          qsv: 1
          cuda: 2
        status: enabled         # set to disabled to temporarily stop using

  plex_server: null             # optional. can be 'server:port'
  colorize: yes                 # enable colors in terminal output
  automap: no                   # defaults to yes; can also be controlled in the profile

#####################################################################################
# profile definitions.  You can model all your transcoding combinations here.
#####################################################################################
profiles:

  #
  # Sample base profile to derive others from (optional)
  #
  common:
    extension: '.mkv'
    threshold: 20         # 20% minimum size reduction %, otherwise source is preserved as-is
    threshold_check: 60   # start checking threshold at 60% done, kill job if threshold not met
    output_options:
        - "-f matroska"
        - "-c:a copy"
        - "-c:s copy"


  #
  # Sample cpu-based transcode, uses built-in default sequential queue
  #
  hevc:
    include: common
    input_options:
    output_options: 
        - "-threads 4"
        - "-c:v hevc"
        - "-crf 20"

  #
  # Sample Intel QSV transcode setup, uses 'qsv' queue defined above
  #
  hevc_qsv:
    include: common
    input_options: -hwaccel vaapi -hwaccel_device /dev/dri/renderD129 -hwaccel_output_format vaapi
    output_options: 
        - "-vf scale_vaapi=format=p010"
        - "-c:v hevc_vaapi"
        - "-crf 20"
    queue: qsv

  #
  # Sample nVidia transcode setup, uses 'cuda' queue defined above
  #
  hevc_cuda:
      include: common
      input_options: -hwaccel cuvid
      output_options:
          - "-c:v hevc_nvenc"
          - "-profile:v main"
          - "-preset medium"
          - "-crf 20"
      queue: cuda

  h264_cuda:
      include: common
      input_options: -hwaccel cuvid
      output_options:
          - "-c:v h264_nvenc"
          - "-profile:v main"
          - "-preset medium"
          - "-crf 20"
      queue: cuda

  #
  # Profile for transcoding anime. Since we disabled automap globally lets turn it back on
  # in this profile to include alternate audio and subtitle tracks
  #
  hevc_cuda_anime:
      include: common
      input_options: -hwaccel cuvid
      output_options:
          - "-c:v hevc_nvenc"
          - "-profile:v main"
          - "-preset medium"
          - "-crf 20"
      queue: cuda
      automap: yes

  hevc_30fps:               # when movie source is just too big, cut down fps
      include: common
      input_options: -hwaccel cuvid
      output_options:
          - "-c:v hevc_nvenc"
          - "-profile:v main"
          - "-preset medium"
          - "-crf 20"
          - "-r 30"
      queue: cuda

  h264:                    # basic h264 transcode using CPU (no CUDA or QSV support)
      input_options:
      output_options: -c:v x264 -crf 22 -c:a copy -c:s copy -f mp4
      extension: '.mp4'


#####################################################################################
# Rules
#####################################################################################
#
# Automatching happens when a profile isn't provided on the command line.  These rules are evalulated to find the
# most appropriate profile for each video to be encoded.
#
# rule criteria:
#
#            vcodec         Video codec of the source ('ffmpeg -codecs' to see full list)
#            res_height     Source video resolution height, operators < and > allowed
#            res_width      Source video resolution width, operators < and > allowed
#            filesize_mb    Size of the source file (in megabytes), operators allowed
#            runtime        Source runtime in minutes, operators allowed
#            fps            Framerate of the source
#            path           Full path of the source file. Value can be a regular expression (ie. '.*/Television/.*').
#
# Rules are evaluated in order.  First matching rule wins so order wisely.
# Rules with a profile of "SKIP" mean to skip processing of the matched video
#
rules:
  'skip video if already encoded in hevc/h265':
      profile: SKIP
      criteria:
        vcodec: 'hevc'

  'anime':
      profile: hevc_cuda_anime
      criteria:
        path: '.*/anime/.*'

  'high frame rate':
      profile: hevc_30fps           # re-encode unusually high frame rate down to 30fps
      criteria:
        fps:         '>30'
        filesize_mb: '>500'

  'skip video if resolution < 700': # don't re-encode something this small - no gain in it
      profile: SKIP
      criteria:
        res_height: '<700'

  'small enough already':       # skip if <2.5g size and higher than 720p and between 30 and 64 minutes long.
      profile: SKIP             # transcoding these will probably cause a noticeable quality loss so skip.
      criteria:
        filesize_mb: '<2500'    # less than 2.5 gigabytes
        res_height:  '720-1081' # 1080p, allowing for random oddball resolutions still in the HD range
        runtime:     '30-65'    # between 30 and 65 minutes long

  'default':    # this will be the DEFAULT (no criteria implies a match)
      profile: hevc_cuda

